# simplifications.ssl - This file is part of the Jakstab project.
# Copyright 2007-2015 Johannes Kinder <jk@jakstab.org>
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, see <http://www.gnu.org/licenses/>.
#

# File: simplifications.ssl
# Desc: This file contains simplification rules for expressions.
#
# The matching is really simple, no commutativity is checked. So
# every combination that shows up in practice must be listed explicitly.
# This helps avoiding some redundant checks for all operand orderings.
#
# The bit widths are ignored for now, so that they can be inferred when 
# the bindings are substituted in the simplified expression.
#
# Jakstab's native operators:
# =, <, <=, <u, <=u, +, &, |, ^, +, unary -
#



INEQUALITIES   x,y
  #*0* (x = y) := (x = y)                        # JE, JZ
  #*0* ~(x = y) := ~(x = y)                      # JNE, JNZ
  #*0* (x <u y) := (x <u y)                      # JB, JNAE, JC
  #*0* ~(x <u y) := ~(x <u y)                    # JNB, JAE, JNC
  *0* (x <u y) | (x = y) := (x <=u y)            # JBE, JNA
  *0* ~((x <u y) | (x = y)) := (y <u x)          # JA, JNBE
  *0* ((x - y) < 0) := (x < y)                   # JS
  *0* (0 < (x - y)) := (y < x)                   # part of JO
  *0* (x < y) ^ ((y < x) & (x < 0)) := x < y     # JL, JNGE after JS and JO replacements
  *0* ((x < y) = ((y < x) & (x < 0))) := y <= x  # JGE, JNL after JS and JO replacements
  #                                              # JLE, JNG implied (previous rules)
  *0* ((y <= x) & (~ (x = y))) := y < x;         # JG, JNLE
